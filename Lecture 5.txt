<I/O redirection>
standard output :  ">" 을 command 뒤에 붙이면 현재 standard output (== 커맨드창)을 txt파일로 만들어줌
                   (">>" : 원래 있던 것을 덮어쓰지 않고 추가로 작성)
                   cat ~~~.txt : txt 파일 출력

standard input : 명령어 < ~~~.txt > 다른이름.txt <== ~~~.txt를 명령어를 적용해서 다른이름.txt로 저장해라
                 ex) sort < a.txt > b.txt

---------

pipeline "|" : command1 | command2 ... <== command1의 output을 command2의 input으로 넣는다
               여러가지 명령어를 조합하여 숏코딩 가능 
               ex) ls -lh | less : 원하는 만큼 스크롤하면서 리스트 확인 

expansion : 특수문자 (특정한 의미 가짐)
            echo A : A 출력 (printf)
            echo * : 현재 디렉토리에 있는 파일 출력 (* : 현재 디렉토리를 담는 expansion)
            echo ~ : 현재 사용자의 home directory 출력 (~ : 현재 사용자의 home directory를 담는 expansion)

permissions : 권한 (read, write, execution)
              리눅스는 multi-user system -> 서로의 파일을 건들이거나, 침해할 수 있기 때문에 권한이 매우 중요
              따라서 파일이나 디렉토리에 3단계로 구분되는 권한 부여 (owner/파일의 group/others)

              <Long format>
              file permissions, owner, group, size in bytes, modification time, file name

              3자리 씩 끊어서 판별

              ex) -rwxrwxrwx : owner = rwx
                               파일의 group = rwx
                               others = rwx

              chmod 명령어를 사용하여 permissions를 변경 가능
              chmod <value> <file name> : value값의 의미에 따라 어떤 file의 권한을 바꾼다 (value값은 2진수로 계산하여 다양함)

superuser : 관리자 권한
            sudo ~~~ : ~~~ 명령어를 관리자 권한으로 실행
            sudo -i : 실행하면 앞으로 계속 관리자 권한으로 커맨드 사용

text editors : CLI에서 제공되는 기본적인 텍스트 에디터
               vi, vim : 키보드로만 작성되며 단축키가 아주 많음
               emacs, nano도 CLI text editors의 예시

shell script : shell 명령어를 파일로 하여 한꺼번에 실행할 수 있게 함
               nano myscript.sh
